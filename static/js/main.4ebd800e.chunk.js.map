{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/ValidUrlPattern.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validate","useState","Math","random","toString","slice","id","touched","setTouched","hasError","isValidUrl","hasInvalidUrlError","htmlFor","style","color","classNames","type","placeholder","event","target","onBlur","pattern","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isMovieValid","match","handleSubmit","current","onSubmit","preventDefault","newValue","disabled","App","moviesFromServer","setMovies","movieToAdd","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ebd800e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validate?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validate = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const isValidUrl = validate(value);\n  const hasInvalidUrlError = touched && !isValidUrl;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          style={hasInvalidUrlError ? { color: 'red' } : {}}\n          className={classNames('input', {\n            'is-danger': hasError || hasInvalidUrlError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasInvalidUrlError && (\n        <p className=\"help is-danger\">Please provide a valid Url</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\nimport { pattern } from './ValidUrlPattern';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie:React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const isMovieValid = title && imgUrl && imdbUrl && imdbId;\n\n  const clearForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbId('');\n    setImdbUrl('');\n  };\n\n  const isValidUrl = (value: string) => !!value.match(pattern);\n\n  const handleSubmit = () => {\n    if (!isValidUrl(imgUrl) || !isValidUrl(imdbUrl)) {\n      if (!isValidUrl(imgUrl)) {\n        setImgUrl('Invalid URL');\n      }\n\n      if (!isValidUrl(imdbUrl)) {\n        setImdbUrl('Invalid URL');\n      }\n\n      return;\n    }\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    setCount(current => current + 1);\n    clearForm();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n        handleSubmit();\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        required\n        onChange={(newValue: string) => setTitle(newValue)}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newValue: string) => setDescription(newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        required\n        onChange={(newValue: string) => setImgUrl(newValue)}\n        validate={isValidUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        required\n        onChange={(newValue: string) => setImdbUrl(newValue)}\n        validate={isValidUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        required\n        onChange={(newValue: string) => setImdbId(newValue)}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isMovieValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movieToAdd: Movie) => {\n    setMovies(current => [\n      ...current,\n      movieToAdd,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}